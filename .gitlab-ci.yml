image: docker:27.3.1
services:
  - name: docker:27.3.1-dind
    alias: docker

stages:
  - build
  - before-test-services
  - test-services
  - after-test-services
  - before-test-gateway
  - test-gateway
  - after-test-gateway
  - deploy

before_script:
  - docker version
  - docker compose version

build-job:
  stage: build
  tags: [build]
  script:
    # - docker system prune -af
    - docker compose build

test-setup-job:
  stage: before-test-services
  tags: [test]
  script:
    - docker compose up -d

# Testing service2 by starting it in a container, exposing port 8200, curling the service
# and verifying that the response has something legible (name of the service and other expected output).
test-service2-job:
  stage: test-services
  tags: [test]
  script:
    - ./tests/test-service2.sh

# Testing unauthorized requests.
# Try to access through the API gateway without authorization and assert that the request fails.
test-unauth-job:
  stage: test-services
  tags: [test]
  script:
    - ./tests/test-unauth.sh

# Testing the /request endpoint of the API gateway.
# It is checked that the response includes the names of the services and other expected contents.
test-request-job:
  stage: test-services
  tags: [test]
  script:
    - ./tests/test-request.sh

# Testing the /stop endpoint of the API gateway.
# The test calls the /stop endpoint, waits for a moment, captures the output of `docker container ls`, and checks that no containers are running.
test-stop-job:
  stage: test-services
  tags: [test]
  script:
    - ./tests/test-stop.sh

# Make sure that docker compose is shut down.
test-cleanup-job:
  stage: after-test-services
  tags: [test]
  when: always
  script:
    - docker compose down

test-setup-job2:
  stage: before-test-gateway
  tags: [test]
  script:
    - docker compose up -d

test-state-job:
  stage: test-gateway
  tags: [test]
  script:
    - ./tests/test-state.sh

test-cleanup-job2:
  stage: after-test-gateway
  tags: [test]
  script:
    - docker compose down

deploy-job:
  stage: deploy
  tags: [deploy]
  script:
    - docker compose up -d
