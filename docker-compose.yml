services:
  service1:
    build:
      context: src/Service1/
    environment:
      - PORT=8199
    depends_on:
      - service2
    deploy:
      replicas: 3
    networks:
      - backend
  service2:
    build:
      context: src/Service2/
    container_name: service2
    environment:
      - PORT=8200
    networks:
      - backend
  nginx:
    build: 
      context: src/nginx/
    container_name: nginx
    ports:
      - "8198:8198"
    networks:
      - backend
    depends_on:
      - service1
      - service2
      - stop_listener
  # Using a small Python script to stop Docker containers on request.
  # Could have used the service1 REST API as well, but Python is way simpler to set up.
  stop_listener:
    build:
      dockerfile: src/stop_listener/Dockerfile
    # Here we expose the Docker socket to the container so that Docker commands can be run
    # on the host machine. Scary.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PORT=22222
    networks:
      - backend

networks:
  backend:
